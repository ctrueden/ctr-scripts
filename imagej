#!/bin/csh 
# A wrapper script to launch imagej from the UNIX command line
# Images given as arguments will be opened, macros may also be given as arguments
# Looks for macros in the imagej macro directory
# feedback to j.jackson at ucl.ac.uk

# Site specific variables ------------------------------------------------------------
# ImageJ path
set ij_path="/home/curtis/apps/ImageJ"
# report errors to this user
set ijadmin="yourEmail"
# default memory allocation
set mem=512
# max memory allocation
set max_mem=1800 # 1800 is memory limit on a 32 bit system
# java path
if (`uname` =~ "SunOS") then
    set java_path="${ij_path}/jre/bin/java -d64"
    set max_mem=4000 # increase memory limit if using 64 bit java
else
    set java_path="${ij_path}/jre/bin/java"
endif
# temp folder
set ij_tmp="/tmp/imagej"
# macro argument conjoining character
set separator=":"
# a " " may work provided no arguments would contain spaces
# use macro functions:  args=getArgument(); argArray=split(args, ":"); 
# to recover macro arguments
# End Site specific variables ---------------------------------------------------------

# instance variables
set dir=`pwd`
set user=`whoami`
set host=`hostname`
if (! $?DISPLAY) then
    echo "Display variable not set"
    echo "If ImageJ fails to load, try "
    echo "% setenv DISPLAY yourcomputer:0"
    echo "if you use the 'csh' or for 'bash' try"
    echo "% export DISPLAY=yourcomputer:0"
    set display="default" 
else
    set display=$DISPLAY
endif

# The best way to install .jar libraries required by plugins is to copy them 
# to the imagej plugins directory
# Alternatively, either copy them to ${ij_path}/jre/lib/ext/ or add the .jar
# filepath to the modules line below. Paths are separated by a colon
set modules="-cp ${ij_path}/ij.jar:${ij_path}/plugins/jars/dcmie.jar"

# if tools.jar is not in ${ij_path}/jre/lib/ext/ edit the 'set tools=' line 
# to point to tools.jar. The -compile switch will load tools.jar into the 
# classpath and enable plugins to be compiled in imagej
set tools="${ij_path}/tools.jar"

set modules="${modules}:${tools}"

# this is for susan nr plugin
if (! $?LD_LIBRARY_PATH) then
    setenv LD_LIBRARY_PATH ${ij_path}
else 
    setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${ij_path}
endif

if ($#argv == 0) then 
    echo ""
    echo 'imagej [options] <img1> [<img2> ..]  -> open images'
    echo  ""     
    echo 'imagej [options] [<img1>] -macro <macro> <arg1> [<arg2> ..] -> run macro'
    echo 'imagej [options] [<img1>] -batch <macro> <arg1> [<arg2> ..] -> batch mode'
    echo ""
    echo "    -mem <MegaBytes> sets available memory (default/max = ${mem}/${max_mem})"
    echo "    -verbose   print imagej command line"
    echo "    -new       force opening a new ImageJ window"
    echo "              (default is to open image in existing window)"
    echo "    -port <N>  use port <N> where 1 < N < 99"
    echo "    -eval 'Macro Code'"
    echo "    -run 'Menu Command'"
    #echo "     -compile to enable .java plugins to be compiled within imagej"
    echo ""
    echo "Supported formats include Dicom, Tiff, Jpeg, Gif etc."
    echo "Documentation - http://rsb.info.nih.gov/ij/ "
    echo
    set newwindow
endif

# parse input arguments
set images=""
set macrocmd=""
set macroargs=""
while ($#argv > 0 )    # could be re-written using getopt
    if ("$argv[1]" =~ '-mem' && $#argv > 1) then
        set testmem=0`echo "$argv[2]" | sed 's/[^0-9]//g'`
        if ($testmem > 16  && $testmem <= $max_mem ) then
            set mem=$testmem
            shift argv
        else 
            echo "$argv[2] is not a permissible value for -mem"
            exit 255
        endif

    #else if ("$argv[1]" =~ '-compile') then
    #    set modules="${modules}:${tools}"

    else if ("$argv[1]" =~ '-verbose') then
        set verbosej

    else if ("$argv[1]" =~ '-new') then
        set newwindow

    else if ("$argv[1]" =~ '-port' && $#argv > 1) then
        set testport=`echo "$argv[2]" | sed -e 's/[^0-9]//g' -e 's/^0//'`
        if ("$testport" =~ [1-9] || "$testport" =~ [1-9][0-9] ) then
            set port=$testport
            shift argv
        else 
            echo "$argv[2] is not a permissible value for -port"
            exit 255
        endif        

    # process macro arguments
    else if ("$argv[1]" =~ '-macro' || "$argv[1]" =~ '-batch') then    
        if ($#argv > 1) then
            set macrocmd="$argv[1] '$argv[2]'"
            shift argv
            while ($#argv > 1) 
                # all arguments following -macro or -batch are passed to the macro
                if ("$macroargs" == "") then 
                    set macroargs="$argv[2]"
                else
                    set macroargs="${macroargs}${separator}$argv[2]"
                endif
                shift argv
            end
			set macroargs="'$macroargs'"
        else
            echo "Missing argument for $argv[1]"
			exit 255 
        endif

	else if ("$argv[1]" =~ '-eval' && $#argv > 1) then
		set images="${images}$argv[1] '$argv[2]' "
		shift argv

    else if ("$argv[1]" =~ '-run' && $#argv > 1) then
        set images="${images}$argv[1] '$argv[2]' "
        shift argv
	
    else if ("$argv[1]" =~ '-mem' || "$argv[1]" =~ '-port' || "$argv[1]" =~ '-eval' || "$argv[1]" =~ '-run') then 
		echo "Missing argument for $argv[1]"
		exit 255 
		
	else 
        # If argument was not otherwise identified, pass as an image
        # single quotes to protect special characters in filename
		set images="${images}'$argv[1]' "  
    endif
    shift argv
end

# If imagej was called with no arguments, force newwindow
if ("$images" == "" && "$macrocmd" == "") set newwindow 

# create imagej socket-lock directory if non existant 
if (! -d "$ij_tmp" ) then
    mkdir $ij_tmp
    chmod 777 $ij_tmp
endif

# Creates a temp file indicating a port is in use by imagej
onintr finish
cd $ij_tmp
set count=1
set portopen=0
set locklist=(`ls | grep '[0-9][0-9]-.*'`)

# port specified by user
if ($?port) then
    # look for a lock on the port specified
    foreach lockname ($locklist)
        set prefix=`printf '%02u' $port`
        if ("$lockname" =~ ${prefix}-${user}-${host}* ) then
            set portopen=1
            if ($?verbosej) echo "Using socket lock: $lockname"
            set count=$port
            break
        else if ("$lockname" =~ ${prefix}-* ) then
            echo "Port $port is in use by some other user or a different host"
            if ($?verbosej) echo "Port lock: $lockname"
            exit 255
        endif
    end 
    # specified port available 
    set count=$port

# Look for listening port (given that new window is not requested)
else if (! $?newwindow && $#locklist != 0) then
    # look for a lock on the current display for this user
    foreach lockname ($locklist)
        if ("$lockname" =~ [0-9][0-9]-${user}-${host}-${display} ) then
            set portopen=1
            if ($?verbosej) echo "Found socket lock: $lockname"
            # if a matching user/display is found, use this one
            set count=`echo $lockname | sed  -e 's/^\([0-9][0-9]\).*/\1/' -e 's/^0//'` # would have been easier in bash... 
            break
        endif
    end
endif

# if a new port is to be used
if (! $portopen) then
    # new window requested or no matching port found
    # if port is not specified, look for first free port
    if (! $?port) then 
        if ($#locklist == 0) then
            # no active locks - use first port
            set count=1
        else
            # active locks - check each port number so see if it is in use
            # this is not synchronised!!
            set count=0
            set inuse=1
            while ($inuse)
                @ count++
                set prefix=`printf '%02u' $count`
                set inuse=0
                foreach lockname ($locklist)
                    if ("$lockname" =~ ${prefix}-* ) then
                        set inuse=1
                    endif
                end
            end
        endif
    endif
    # creating a new port lock
    set prefix=`printf '%02u' $count`
    set lockname=${prefix}-${user}-${host}-${display}
    touch $lockname
    set lockFileCreated
    echo "Listening on imagej port $count" 
    if ($?verbosej) echo "Socket lock: $lockname"
endif

# Report number of port locks - more than 50 may indicate error in this script
if ($count > 50 && ! $?port && "$ijadmin" !~ "yourEmail") then
mail -s "ImageJ ports on $host" $ijadmin << EOF
Port locks on $host reached $count
EOF
endif

if ($?verbosej) then
    echo ${java_path} -mx${mem}m ${modules} ij.ImageJ -ijpath ${ij_path} -port${count} ${images} ${macrocmd} ${macroargs}
endif
echo

cd $dir
eval "${java_path} -mx${mem}m ${modules} ij.ImageJ -ijpath ${ij_path} -port${count} ${images} ${macrocmd} ${macroargs}"

finish:
onintr -

if ($?lockFileCreated) then
    \rm ${ij_tmp}/$lockname
endif

exit 0
